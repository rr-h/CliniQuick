---
---
// Import the ability to read Markdown files
import { glob } from 'astro';

// Define props (With TypeScript)
interface BannerProps {
  className?: string;
  backgroundColor?: string;
  partNumber: number; // For selecting the correct .md file
  lang?: string; // If supporting multiple languages
}

const Banner = async ({ className = "", backgroundColor, partNumber, lang = 'en' }: BannerProps) => {
  // Fetch the correct Markdown file based on partNumber and lang
  const partFiles = await glob(`./part-${partNumber}*.${lang}.md`);
  const partContent = await partFiles[0].then((part) => part.content);

  const background = backgroundColor ? { backgroundColor: backgroundColor } : null;

  return (
    <div class={`banner ${className}`} style={background}>
      <p dangerouslySetInnerHTML={{ __html: partContent.mainImage }} />
      <p>{partContent.intro}</p> 
      
interface BannerProps {
  className?: string;
  backgroundColor?: string;
  initialText?: string; // For initial banner message
  [propName: string]: any;
}

// Component logic
const Banner = ({ className = "", backgroundColor, initialText, ...props }: BannerProps) => {
  const background = backgroundColor ? { backgroundColor: backgroundColor } : null;
  let bannerMessage = initialText ?? ''; // Set initial text with a fallback

  return (
    <div class={`banner ${className}`} style={background} {...props}>
      <p>{bannerMessage}</p>

      <button client:load onclick={() => (bannerMessage = 'New Message!')}>
        Update Text
      </button>    
    </div>
  );
};
---

<style>
  /* Replicate your CSS from the Banner.scss file */
  .banner {
    display: flex;
    width: 100%;
    align-items: center;
    position: relative;
    padding: $vertical-spacing * 2 0; /* Assuming you have this variable defined */
    background-color: $main;
  }

  @media (min-width: $desktop) { /* Adjust $desktop breakpoint as needed */
    .banner {
      padding: 3.444rem; 
      padding-bottom: 4.444rem;
    }
  }
</style>
