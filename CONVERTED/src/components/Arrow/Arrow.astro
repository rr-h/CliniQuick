---
// Import statements for necessary libraries and JSON data
import colors from "../colors.json";

// Define the interface for the arrow content items
interface ArrowItem {
  backgroundColor?: string;
  link?: string;
  text: string;
}

// Define the props for the Arrow component
interface ArrowProps {
  className?: string;
  wrapperClassName?: string;
  link?: string;
  content: ArrowItem[];
  stack?: boolean;
  bold?: boolean;
  thickBorder?: boolean;
  upperCase?: boolean;
}

// The Arrow component
const Arrow = ({
  className = "",
  wrapperClassName = "",
  link,
  content,
  stack,
  bold,
  thickBorder,
  upperCase,
}: ArrowProps) => {
  // Function to render individual arrow items
  const renderArrowItem = (arrow: ArrowItem, i: number) => {
    const arrowStyle = {
      backgroundColor: arrow.backgroundColor || "transparent",
      color:
        arrow.backgroundColor === colors["black"] ? "white" : colors["black"],
    };

    return (
      <div key={`arrow-${i}`} class={`arrow__wrapper ${className}`}>
        <div
          class={`arrow__rectangle ${bold ? "bold" : ""} ${thickBorder ? "arrow__rectangle--thick-border" : ""}`}
          style={arrowStyle}
        >
          {arrow.link ? (
            <a href={arrow.link} class="arrow__link">
              {upperCase ? arrow.text.toUpperCase() : arrow.text}
            </a>
          ) : upperCase ? (
            arrow.text.toUpperCase()
          ) : (
            arrow.text
          )}
        </div>
        <div
          class={`arrow__point ${thickBorder ? "arrow__point--thick-border" : ""}`}
          style={arrowStyle}
        />
      </div>
    );
  };

  let renderContent = (
    <div class={`arrow__container arrows--horizontal ${className}`}>
      {content.map((arrow, i) => renderArrowItem(arrow, i))}
    </div>
  );

  if (!stack && !link) {
    return <div class="col-10 spacing--after">{renderContent}</div>;
  } else if (!stack && link) {
    return (
      <div class="spacing--after-small auto-bottom-margin">
        <a href={link} style="display: inline-block;">
          {renderContent}
        </a>
      </div>
    );
  } else if (stack) {
    return (
      <div class={`col-10 spacing--after ${wrapperClassName}`}>
        <div
          class="arrow__container arrow__container--with-link"
          style="display: flex; flex-direction: column;"
        >
          {content.map((arrow, i) => (
            <a
              href={arrow.link}
              key={arrow.text}
              class={`arrow__wrapper--stacked ${className}`}
            >
              <div
                class="arrow__rectangle"
                style="flex: 1; ${arrow.backgroundColor ? `background-color: ${arrow.backgroundColor};` : ''} ${arrow.backgroundColor === colors['black'] ? 'color: white;' : `color: ${colors['black']};`}"
              >
                <p class="arrow--stacked-title">
                  <span>
                    {upperCase ? arrow.text.toUpperCase() : arrow.text}
                  </span>
                </p>
              </div>
              <div
                class="arrow__point"
                style={`background-color: ${arrow.backgroundColor || "transparent"}; color: ${arrow.backgroundColor === colors["black"] ? "white" : colors["black"]};`}
              />
            </a>
          ))}
        </div>
      </div>
    );
  }

  // Fallback render if none of the conditions above match
  return null;
};

export default Arrow;
---

<!-- Style imports or definitions can be added here
