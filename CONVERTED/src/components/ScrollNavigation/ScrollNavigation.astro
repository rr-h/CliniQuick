---
// Import statements
import Accordion from '../Accordion/Accordion.astro';
import Element from '../Element/Element.astro';
// Import Link from 'gatsby'; // Not used directly in Astro, replaced with Astro's <a> with "href"
import navigation from '../../../src/content/partnavigation/partnavigation.astro';
// Import PropTypes from 'prop-types'; // PropTypes are not used in Astro, as Astro does not have prop type validation like React
// import kebabCase from 'lodash/fp/kebabCase'; // This will be handled in the front-end script if necessary
// import snakeCase from 'lodash/fp/snakeCase'; // This will be handled in the front-end script if necessary

// Astro props are passed as attributes to the component in the template
const { className = '', lang = 'fi', colorCode, currentPath, currentPartTitle, part, letter } = Astro.props;

// Client-side interactivity can be added via front-end scripts
// Note: Direct manipulation like in React's componentDidMount will need to be adapted for client use
// Define any necessary functions or stateful logic here
---

<style is:global>
@import "../../styles/ScrollNavigation.scss";
</style>

<script>
// You might need to adapt this to use front-end libraries or vanilla JS for DOM manipulations
// Example: Document query selections and manipulations for `componentDidMount` logic
document.addEventListener('DOMContentLoaded', () => {
  const headingList = Array.from(document.querySelectorAll('h3'));
  headingList.forEach(i => {
    const id = kebabCase(i.innerText); // You'll need to define or import kebabCase for client-side use
    i.id = id;
    i.classList.add('offset');
  });
  // Additional logic here if needed
});
</script>

<Element tag="ul" flex dirColumn class={`scroll-navigation ${className}`}>
  { /* loopThroughPartsNode logic will need to be adapted here, possibly with an Astro {#each} loop */ }
  {#each Object.entries(navigation[lang][part]) as [key, value]}
    {#if currentPartTitle !== value}
      <a key={key} class="left-navigation-link" style={{ borderColor: colorCode }} href={`/${lang === 'en' ? 'en/part' : 'osa'}${part}/${snakeCase(value)}`}>
        {`${key} ${value}`}
      </a>
    {:else}
      <Accordion containerClassName="accordion--side-navigation" style={{ color: colorCode }} titleStyle={{ backgroundColor: colorCode, borderColor: colorCode }} initiallyOpened key={key} title={`${letter} ${value}`} list={/* map headings to hrefs and texts here */} />
    {/if}
  {/each}
</Element>
